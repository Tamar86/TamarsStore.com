//im importing createSlice from redux toolkit setup to create a slice for managing the state related
//to a shopping cart in a React application.

import { createSlice } from "@reduxjs/toolkit";
// createSlice: A function from Redux Toolkit
const cartSlice = createSlice({
  //the name of the slice
  name: "cart",
  //the initial state of the slice containing properties like value, items, etc
  initialState: {
    value: 0,
    items: [],
    totalPrice: 0,
    quantity: 0,
    price: 0,
  },
  //reducers use immutability principles by creating new objects or arrays instead of
  // modifying the existing state directly
  reducers: {
    //adds an item to the cart.
    addToCart: (state, action) => {
      console.log("action payload", action.payload);

      if (!action.payload) {
        console.error("payload is undefined");
        return state;
      }
      const { id } = action.payload;
      //im using AND operator because when clicking multiple times on same item and after that trying to click
      //another item was giving an error. so now it checks if item is truthy(not null, undefined, false, 0, NaN).
      //if item is truthy it proceeds to check if item.id === id
      const existingProduct = state.items.find(
        (item) => item && item.id === id
      );
      // if the item already exists it increments quantity
      if (existingProduct) {
        existingProduct.quantity += 1;
        //state.items.length++;
        //if not it adds a new item to the items array
      } else {
        state.items.push({
          id,
          product: action.payload,
          quantity: 1,
        });
      }

      state.value = state.items.length;
      state.totalPrice += action.payload.price;
    },
    //removes an item from the card based on the product ID
    deleteFromCart: (state, action) => {
      console.log("action", action.payload);

      const deletedItem = action.payload;
      const deletedQuantity = deletedItem.quantity;

      state.items = state.items.filter(
        (item) => item.product.id !== deletedItem.product.id
      );

      state.value -= deletedQuantity; // Subtracts the deleted item's quantity from the total value
      state.totalPrice = state.items.reduce(
        (total, item) => total + item.product.price * item.quantity,
        0
      );
    },
    //increases the quantity of the specific item in the cart, with some additional checks
    increaseItemQuantity: (state, action) => {
      const { itemId, newQuantity, itemPrice } = action.payload;

      if (newQuantity > 20) {
        alert("Exceeds purchase limit");
        return state;
      }

      const updatedItems = state.items.map((item) =>
        item.product.id === itemId ? { ...item, quantity: newQuantity } : item
      );
      return {
        ...state,
        items: updatedItems,
        value: state.value + 1,

        totalPrice: state.totalPrice + itemPrice,
      };
    },
    // decreases the quantity of a specific item in the cart, with a check to ensure the quantity
    // does not go below 1
    decreaseItemQuantity: (state, action) => {
      const { itemId, newQuantity, itemPrice } = action.payload;
      if (newQuantity < 1) {
        return state;
      }

      const updatedItems = state.items.map((item) =>
        item.product.id === itemId ? { ...item, quantity: newQuantity } : item
      );

      return {
        ...state,
        items: updatedItems,
        value: state.value - 1,
        totalPrice: state.totalPrice - itemPrice,
        price: state.price - itemPrice,
      };
    },
  },
});
//these actions generated by the slice and dispatched in react components, in this case only in Cart component,
//to trigger state updates.
export const {
  addToCart,
  deleteFromCart,
  state,
  increaseItemQuantity,
  decreaseItemQuantity,
} = cartSlice.actions;
//exports the reducer function generated by create slice
export default cartSlice.reducer;
